<?xml version="1.0" encoding="utf-8" ?>
<otrs_package version="1.1">
    <Name>Znuny-Multiple-Tab-Agent-Ticket-Status-View</Name>
    <Version>7.0.3</Version>
    <Vendor>mo-azfar</Vendor>
    <URL>https://github.com/mo-azfar/Znuny-Multiple-Tab-Agent-Ticket-Status-View</URL>
    <License>GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007</License>
    <ChangeLog Date="2023-08-07 00:00:01" Version="7.0.1">New package.</ChangeLog>
    <ChangeLog Date="2023-08-22 00:00:01" Version="7.0.2">Push closed ticket tab to the end of the position.</ChangeLog>
    <ChangeLog Date="2023-08-29 00:00:01" Version="7.0.3">Matching file based znuny 7.0.10.</ChangeLog>
    <Description Lang="en">display multiple tab of agent ticket status filtered by ticket type (opens ticket).</Description>
    <Framework>7.0.x</Framework>
    <IntroInstall Lang="en" Title="Install Information" Type="pre">
        &lt;br&gt;
        &lt;b&gt;WELCOME&lt;/b&gt;
        &lt;br&gt;
        &lt;br&gt;
        You are about to install the package Znuny-Multiple-Tab-Agent-Ticket-Status-View.Check &lt;a href='https://github.com/mo-azfar/Znuny-Multiple-Tab-Agent-Ticket-Status-View' target='_blank'&gt;README&lt;/a&gt;&lt;br&gt;
        &lt;br&gt;
		AgentTicketStatusView.pm is based on Znuny 7.0.9. You may later need to update / patch it based on latest release of znuny.&lt;br/&gt;
		I will try to update it to match the latest release if there is a changes in the said files.
        &lt;br&gt;
        ((enjoy))&lt;br&gt;
        &lt;br&gt;
    </IntroInstall>
    <BuildDate>2023-08-29 20:18:50</BuildDate>
    <BuildHost>app.myserver.com</BuildHost>
    <Filelist>
        <File Location="Kernel/Config/Files/XML/ZZZAgentTicketStatusViewTab.xml" Permission="660" Encode="Base64">PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4NCjxvdHJzX2NvbmZpZyB2ZXJzaW9uPSIyLjAiIGluaXQ9IkNvbmZpZyI+DQoJPFNldHRpbmcgTmFtZT0iVGlja2V0OjpGcm9udGVuZDo6QWdlbnRUaWNrZXRTdGF0dXNWaWV3IyMjVmlld0J5OjpUeXBlIiBSZXF1aXJlZD0iMSIgVmFsaWQ9IjEiPg0KICAgICAgICA8RGVzY3JpcHRpb24gVHJhbnNsYXRhYmxlPSIxIj5EZWZpbmVzIHRoZSB0aWNrZXQgdHlwZSBhdHRyaWJ1dGUgZm9yIHRpY2tldCB0YWIgaW4gdGhlIHN0YXR1cyB2aWV3IG9mIHRoZSBhZ2VudCBpbnRlcmZhY2UuPC9EZXNjcmlwdGlvbj4NCiAgICAgICAgPE5hdmlnYXRpb24+RnJvbnRlbmQ6OkFnZW50OjpWaWV3OjpUaWNrZXRTdGF0dXM8L05hdmlnYXRpb24+DQogICAgICAgIDxWYWx1ZT4NCiAgICAgICAgICAgIDxIYXNoPg0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgPC9IYXNoPg0KICAgICAgICA8L1ZhbHVlPg0KICAgIDwvU2V0dGluZz4NCjwvb3Ryc19jb25maWc+DQo=</File>
        <File Location="Custom/Kernel/Modules/AgentTicketStatusView.pm" Permission="660" Encode="Base64"></File>
    </Filelist>
</otrs_package>